

name: Build Gitblit 


on:
  workflow_dispatch:
  push:

env:
  GH_ORG: fzs
  GH_UPSTREAM_ORG: flaix
  GITBLIT_VERSION: 1.9.2


jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Check environment
        env:
          GITHUB_CTX_ENV: ${{ toJSON(env) }}
        run: |
          echo "GITHUB_SHA: $GITHUB_SHA"
          echo "GITHUB_RFE: $GITHUB_REF"
          echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
          echo "GITHUB_BASE_REF: $GITHUB_BASE_REF"
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          echo "Event context:"
          echo "$GITHUB_CTX_ENV"


      - name: Dump event payload
        env:
          GITHUB_CONTEXT_EVENT: ${{ toJSON(github.event) }}
        run: |
          echo "Action event name: ${{ github.event_name }}"
          echo "$GITHUB_CONTEXT_EVENT"

      - name: Get user from event
        run: |
          echo "Event sender: ${{github.event.sender.login}}"
          if [ ${{github.event_name}} == "push" ] ; then
            echo "REL_USER=${{ github.event.pusher.name }}" >> $GITHUB_ENV
            echo "REL_USER_EMAIL=${{ github.event.pusher.email }}" >> $GITHUB_ENV
          elif [ ${{github.event_name}} == "workflow_dispatch" ] ; then
            echo "REL_USER=??"
          fi


      - name: Checkout upstream repo
        uses: actions/checkout@v2
        with:
          path: gitblit
          repository: ${{ env.GH_ORG }}/gitblit

      - name: Fetch all remote branches
        working-directory: gitblit
        run: |
          git fetch --prune --depth=20 origin +refs/heads/*:refs/remotes/origin/*


      - name: Find out Git user
        working-directory: gitblit
        run: |
          # If present, use the user that triggered the release perform workflow with an action
          if [ -n "$REL_USER" ] ; then

            # Try to get the user's name
            gh_user_name=$(curl -s ${{github.event.sender.url}} | jq -r .name)
            if [ -n "$gh_user_name" ] ; then
              echo "Checking commits for author name $gh_user_name"
              commit=$(git rev-list --all -i --max-count=1 --author="$gh_user_name")
            fi
            if [ -z "$commit" ] ; then
              echo "Checking commits for author id $REL_USER"
              commit=$(git rev-list --all -i --max-count=1 --author="$REL_USER")
            fi

            if [ -n "$commit" ] ; then
              git show --no-patch $commit
              user_name="$(git show --no-patch --pretty=format:"%an" $commit)"
              user_email="$(git show --no-patch --pretty=format:"%ae" $commit)"
            else
              # Use the user name, but my email
              echo "No commit found. Using $REL_USER and fixed email."
              user_name="$REL_USER"
              user_email="2362065+flaix@users.noreply.github.com"
            fi
          else
              # Use my user name and my email
              echo "Nothing available, using fixed name and email."
              user_name="flaix"
              user_email="2362065+flaix@users.noreply.github.com"
          fi

          echo "REL_USER_NAME=${user_name}"
          echo "REL_USER_NAME=${user_name}" >> $GITHUB_ENV
          echo "REL_USER_EMAIL=${user_email}"
          echo "REL_USER_EMAIL=${user_email}" >> $GITHUB_ENV

          echo "REL_USER=${REL_USER}" >> ../relinfo.sh
          echo "REL_USER_NAME=${user_name}" >> ../relinfo.sh
          echo "REL_USER_EMAIL=${user_email}" >> ../relinfo.sh


      - name: Get SHA
        working-directory: gitblit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run:  |
          gh release download --repo ${GH_ORG}/gitblit v${GITBLIT_VERSION} --pattern 'gitblit-*.tar.gz' --dir gitblit-GO
          sha256sum gitblit-GO/gitblit-${GITBLIT_VERSION}.tar.gz
          sha=$(sha256sum gitblit-GO/gitblit-${GITBLIT_VERSION}.tar.gz | cut -f1 -d' ')
          echo "SHA=$sha" >> ../relinfo.sh

          cat ../relinfo.sh
          



  call_workflow:
    uses: fzs/test_workflows/.github/workflows/called_wf.yaml@main
    needs: build
